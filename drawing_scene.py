import os

from PySide6.QtWidgets import QGraphicsScene, QGraphicsPixmapItem, QGraphicsItem, QMenu, QColorDialog, QWidget, \
    QGraphicsPolygonItem, QGraphicsLineItem
from PySide6.QtGui import QPixmap, QPen, QColor, QPainterPath, QAction, QPainter, QPolygonF
from PySide6.QtCore import Qt, QRectF, QDateTime


class DrawableObject:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ñ–∏–≥—É—Ä—É –Ω–∞ —Å—Ü–µ–Ω–µ"""
    def __init__(self, shape, item):
        self.shape = shape  # –¢–∏–ø —Ñ–∏–≥—É—Ä—ã: 'circle', 'square', 'line'
        self.item = item  # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç QGraphicsItem
        self.pen = item.pen()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–∞

    def set_pen(self, pen: QPen):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∞ (—Ü–≤–µ—Ç, —Ç–æ–ª—â–∏–Ω–∞ –∏ —Ç.–¥.)"""
        self.pen = pen
        self.item.setPen(pen)
        self.item.update()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    def move(self, dx, dy):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        self.item.moveBy(dx, dy)

class DrawingScene(QGraphicsScene):
    """–°—Ü–µ–Ω–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–≥—É—Ä –∏ –∫–∏—Å—Ç–∏"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.pen_color = QColor(0, 255, 0, 255)  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.pen_width = 2  # –¢–æ–ª—â–∏–Ω–∞ –∫–∏—Å—Ç–∏
        self.shape_mode = None
        self.current_path = None
        self.current_item = None
        self.start_point = None
        self.image_item = None
        self.image_rect = None
        self.drawing = False
        self.temp_item = None
        self.objects = []  # ‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ
        self.active_scene = None  # ‚úÖ –¢–µ–∫—É—â–∏–π sceen –∏–ª–∏ sub_sceen
        self.selected_object = None
        self.current_polygon = []  # üî• –•—Ä–∞–Ω–∏—Ç —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    def set_active_scene(self, scene):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, –≤ –∫–∞–∫–æ–º sceen –∏–¥–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ"""
        self.active_scene = scene

    def set_drawing_mode(self, mode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        self.shape_mode = mode

    def set_pen_width(self, width):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ç–æ–ª—â–∏–Ω—É –∫–∏—Å—Ç–∏"""
        self.pen_width = width
        self.update_scene_objects()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    def set_pen_color(self, color):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∏—Å—Ç–∏"""
        self.pen_color = QColor(color.red(), color.green(), color.blue(), self.pen_color.alpha())
        self.update_scene_objects()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    def set_pen_opacity(self, value):
        """–ú–µ–Ω—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∫–∏—Å—Ç–∏ (0-100 -> 0-255)"""
        alpha = int((value / 100) * 255)
        self.pen_color.setAlpha(alpha)
        self.update_scene_objects()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º —É–∂–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    def update_scene_objects(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º sceen –∏–ª–∏ sub_sceen"""
        if not self.active_scene:
            return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        new_pen = QPen(self.pen_color, self.pen_width)  # ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π `QPen`

        for obj in self.active_scene.objects:
            if isinstance(obj, DrawableObject):
                obj.set_pen(new_pen)  # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

    def load_image(self, image_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ü–µ–Ω—É"""
        pixmap = QPixmap(image_path)
        if pixmap.isNull():
            print("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        if self.image_item:
            self.removeItem(self.image_item)
        self.image_item = QGraphicsPixmapItem(pixmap)
        self.addItem(self.image_item)
        self.image_item.setZValue(-1)
        self.image_rect = self.image_item.boundingRect()

    def save_shapes_in_scene(self, scene, base_folder, scene_index, project_folder=None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç `scene`, –æ–±—Ä–µ–∑–∞—è –µ—ë –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä, –∏ `sub_sceen`, –≤—ã—Ä–µ–∑–∞—è `sub_sceen` –æ–±–ª–∞—Å—Ç–∏.
        - scene: —Ç–µ–∫—É—â–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞.
        - base_folder: –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        - scene_index: –∏–Ω–¥–µ–∫—Å —Å—Ü–µ–Ω—ã.
        - project_folder: –ø—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (—á—Ç–æ–±—ã `scene` –∏ `sub_sceen` –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ –ø–∞–ø–∫–∏).
        """

        if not scene or not hasattr(scene, "objects"):
            print(f"–û—à–∏–±–∫–∞: scene {scene_index} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤!")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if project_folder is None:
            timestamp = QDateTime.currentDateTime().toString("yyyyMMdd_HHmmss")
            project_folder = os.path.join(base_folder, f"Project_{timestamp}")
            os.makedirs(project_folder, exist_ok=True)

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω—ã
        scene_folder = os.path.join(project_folder, f"scene_{scene_index}")
        os.makedirs(scene_folder, exist_ok=True)

        # ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã –∏ `sub_sceen`
        def collect_objects(scene_obj):
            objects_dict = {"scene": [], "sub_scenes": {}, "excluded_areas": [], "bounding_rects": []}

            if hasattr(scene_obj, "objects"):
                for obj in scene_obj.objects:
                    if isinstance(obj, DrawableObject) and obj.shape in {"circle", "square", "polygon"}:
                        objects_dict["scene"].append(obj)
                        objects_dict["bounding_rects"].append(obj.item.sceneBoundingRect())
                    elif isinstance(obj, QWidget):  # –≠—Ç–æ sub_sceen
                        sub_index = len(objects_dict["sub_scenes"]) + 1
                        sub_folder = os.path.join(scene_folder, f"sub_sceen_{sub_index}")
                        os.makedirs(sub_folder, exist_ok=True)

                        # üî• –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º `project_folder`, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
                        sub_data = collect_objects(obj)
                        objects_dict["sub_scenes"][sub_folder] = sub_data["scene"]
                        objects_dict["excluded_areas"].extend(
                            [obj.item.sceneBoundingRect() for obj in sub_data["scene"]])

            return objects_dict

        objects_data = collect_objects(scene)

        # ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º bounding box –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
        if objects_data["bounding_rects"]:
            min_x = min(rect.left() for rect in objects_data["bounding_rects"])
            min_y = min(rect.top() for rect in objects_data["bounding_rects"])
            max_x = max(rect.right() for rect in objects_data["bounding_rects"])
            max_y = max(rect.bottom() for rect in objects_data["bounding_rects"])
            scene_bbox = QRectF(min_x, min_y, max_x - min_x, max_y - min_y)
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ—Ç —Ñ–∏–≥—É—Ä –≤ —Å—Ü–µ–Ω–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º QPixmap –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ `scene`
        pixmap_scene = QPixmap(scene_bbox.size().toSize())
        pixmap_scene.fill(Qt.transparent)

        # ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å —Ñ–∏–≥—É—Ä
        painter_scene = QPainter(pixmap_scene)
        self.render(painter_scene, QRectF(pixmap_scene.rect()), scene_bbox)
        painter_scene.end()

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É `sub_sceen`
        mask_pixmap = QPixmap(scene_bbox.size().toSize())
        mask_pixmap.fill(Qt.transparent)

        painter_mask = QPainter(mask_pixmap)
        painter_mask.setBrush(QColor(0, 0, 0, 255))  # –ß—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        painter_mask.setPen(QColor(0, 0, 0, 255))

        for exclusion in objects_data["excluded_areas"]:
            exclusion_mapped = exclusion.translated(-scene_bbox.topLeft())  # –ü–µ—Ä–µ–Ω–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            painter_mask.drawRect(exclusion_mapped)

        painter_mask.end()

        # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ `scene`
        final_scene = QPixmap(pixmap_scene.size())
        final_scene.fill(Qt.transparent)

        painter_final = QPainter(final_scene)
        painter_final.drawPixmap(0, 0, pixmap_scene)  # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        painter_final.setCompositionMode(QPainter.CompositionMode_DestinationOut)  # –í—ã—Ä–µ–∑–∞–µ–º `sub_sceen`
        painter_final.drawPixmap(0, 0, mask_pixmap)
        painter_final.end()

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `scene` —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        scene_save_path = os.path.join(scene_folder, "scene.png")
        if final_scene.save(scene_save_path):
            print(f"–°—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {scene_save_path}")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã: {scene_save_path}")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `sub_sceen_X`, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±—â–∏–π `project_folder`
        for sub_folder, sub_objects in objects_data["sub_scenes"].items():
            for idx, obj in enumerate(sub_objects):
                rect = obj.item.sceneBoundingRect()
                rect = rect.intersected(scene_bbox)

                if rect.isEmpty():
                    continue

                cropped_pixmap = pixmap_scene.copy(rect.translated(-scene_bbox.topLeft()).toRect())
                save_path = os.path.join(sub_folder, f"shape_{idx}.png")

                if cropped_pixmap.save(save_path):
                    print(f"–§–∏–≥—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–æ–¥-—Å—Ü–µ–Ω–µ: {save_path}")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ø–æ–¥-—Å—Ü–µ–Ω–µ: {save_path}")

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        if not self.active_scene:
            return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã, –Ω–µ —Ä–∏—Å—É–µ–º

        point = event.scenePos()
        pen = QPen(self.pen_color, self.pen_width)

        if self.shape_mode == "line":
            if not self.current_polygon:
                # üî• –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –ª–∏–Ω–∏–π
                self.current_polygon.append(point)
            else:
                last_point = self.current_polygon[-1]

                # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º–∫–Ω—É–ª–∞—Å—å –ª–∏ —Ñ–∏–≥—É—Ä–∞
                if len(self.current_polygon) > 2 and (point - self.current_polygon[0]).manhattanLength() < 10:
                    self.current_polygon.append(self.current_polygon[0])  # –ó–∞–º—ã–∫–∞–µ–º —Ñ–∏–≥—É—Ä—É
                    self.create_polygon()
                else:
                    # üî• –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–∏–Ω–∏—é
                    line = QGraphicsLineItem(last_point.x(), last_point.y(), point.x(), point.y())
                    line.setPen(pen)
                    self.addItem(line)
                    self.active_scene.objects.append(DrawableObject("line", line))
                    self.current_polygon.append(point)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Å–ø–∏—Å–æ–∫

        elif self.shape_mode in ["circle", "square"]:
            self.start_point = point
            self.drawing = True

            # –ò–º–∏—Ç–∞—Ü–∏—è mouseMoveEvent, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–≥—É—Ä—É
            if self.shape_mode == "circle":
                radius = 10  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
                self.temp_item = self.addEllipse(point.x(), point.y(), radius, radius, pen)
            elif self.shape_mode == "square":
                rect = QRectF(point.x(), point.y(), 10, 10)  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
                self.temp_item = self.addRect(rect, pen)

    def create_polygon(self):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–∏–≥–æ–Ω –∏–∑ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π"""
        if len(self.current_polygon) < 3:
            return  # üî• –ú–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è —Ñ–∏–≥—É—Ä—ã

        pen = QPen(self.pen_color, self.pen_width)
        polygon_item = QGraphicsPolygonItem(QPolygonF(self.current_polygon))
        polygon_item.setPen(pen)
        polygon_item.setBrush(QColor(self.pen_color.red(), self.pen_color.green(), self.pen_color.blue(), 100))

        self.addItem(polygon_item)
        self.active_scene.objects.append(DrawableObject("polygon", polygon_item))
        self.current_polygon.clear()  # üî• –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏

    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        if self.shape_mode is None:  # ‚úÖ –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º "–ú—ã—à—å"
            if self.selected_object and self.selected_object != self.image_item:
                delta = event.scenePos() - self.start_point
                self.selected_object.setPos(self.selected_object.pos() + delta)  # ‚úÖ –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç
                self.start_point = event.scenePos()  # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
            return

        # ‚úÖ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        if not self.drawing:
            return
        pen = QPen(self.pen_color, self.pen_width)
        if self.shape_mode == "free" and self.current_item:
            path = self.current_path
            path.lineTo(event.scenePos())
            self.current_item.setPath(path)
        elif self.shape_mode in ["circle", "square", "line"]:
            if self.start_point is None:
                return
            if self.temp_item:
                self.removeItem(self.temp_item)
            if self.shape_mode == "circle":
                radius = abs(event.scenePos().x() - self.start_point.x())
                self.temp_item = self.addEllipse(self.start_point.x(), self.start_point.y(), radius, radius, pen)



            elif self.shape_mode == "square":
                if self.start_point is None:
                    return
                if self.temp_item:
                    self.removeItem(self.temp_item)

                x1, y1 = self.start_point.x(), self.start_point.y()
                x2, y2 = event.scenePos().x(), event.scenePos().y()

                rect = QRectF(x1, y1, x2 - x1, y2 - y1).normalized()  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
                self.temp_item = self.addRect(rect, pen)



    def mouseReleaseEvent(self, event):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ sceen"""
        if not self.active_scene:
            return

        if self.shape_mode in ["circle", "square", "line"] and self.temp_item:
            drawable = DrawableObject(self.shape_mode, self.temp_item)
            self.temp_item.setFlags(QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsMovable)

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ü–µ–Ω—É –∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            self.active_scene.objects.append(drawable)
            self.objects.append(drawable)

            self.temp_item = None

        self.drawing = False

    def enable_selection(self):
        """–í–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª—è—Ç—å –∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —Ñ–∏–≥—É—Ä—ã, –∫—Ä–æ–º–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        for obj in self.objects:
            if obj.item != self.image_item:  # ‚úÖ –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                obj.item.setFlags(
                    QGraphicsItem.ItemIsSelectable |
                    QGraphicsItem.ItemIsMovable |
                    QGraphicsItem.ItemSendsScenePositionChanges  # ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
                )

        # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º, –∫—Ä–æ–º–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for item in self.items():
            if isinstance(item, QGraphicsItem) and item != self.image_item and item not in [obj.item for obj in
                                                                                            self.objects]:
                item.setFlags(QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsMovable)

    def contextMenuEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ü–ö–ú (–ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π) –ø–æ –æ–±—ä–µ–∫—Ç—É"""
        item = self.itemAt(event.scenePos(), self.views()[0].transform())
        if item:
            menu = QMenu()

            delete_action = QAction("–£–¥–∞–ª–∏—Ç—å", self)
            delete_action.triggered.connect(lambda: self.remove_object(item))
            menu.addAction(delete_action)

            menu.exec(event.screenPos())

    def remove_object(self, item):
        """–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ü–µ–Ω—ã"""
        for obj in self.objects[:]:  # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
            if obj.item == item:
                self.removeItem(item)
                self.objects.remove(obj)
                break  # ‚úÖ –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫

    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à"""
        if event.key() == Qt.Key_Delete:
            selected_items = self.selectedItems()
            for item in selected_items:
                self.remove_object(item)

    def change_selected_color(self, color):
        """–ú–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        for obj in self.objects:
            if obj.item.isSelected():
                pen = QPen(color, obj.pen.width())
                obj.set_pen(pen)

    def choose_color(self):
        """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫–∏—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä –≤ sceen/sub_sceen"""
        color = QColorDialog.getColor()
        if color.isValid() and self.scene:
            self.scene.set_pen_color(color)  # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–∏—Å—Ç–∏
            self.scene.update_scene_objects()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –≤ sceen –∏–ª–∏ sub_sceen

    def update_scene_objects(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º sceen –∏–ª–∏ sub_sceen"""
        if not self.active_scene:
            return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        for obj in self.active_scene.objects:
            if isinstance(obj, DrawableObject):  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Ä–∏—Å—É–µ–º—ã–π
                pen = QPen(self.pen_color, obj.pen.width())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                obj.set_pen(pen)

    def change_pen_opacity(self, value):
        """–ú–µ–Ω—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∫–∏—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∏–≥—É—Ä—ã"""
        if self.scene:
            self.scene.set_pen_opacity(value)
            self.scene.update_scene_objects()  # üî• –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –≤ sceen –∏–ª–∏ sub_sceen



