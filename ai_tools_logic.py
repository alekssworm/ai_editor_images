from PyQt6.QtGui import QIcon, QPixmap
from PyQt6.QtWidgets import QFrame
from PySide6.QtWidgets import QDockWidget, QWidget, QVBoxLayout, QScrollArea, QSizePolicy, QPushButton, QGraphicsItem, \
    QFileDialog
from PySide6.QtCore import Qt

from drawing_scene import DrawableObject
from ui_ai_panel import Ui_DockWidget  # –ò–º–ø–æ—Ä—Ç UI –ø–∞–Ω–µ–ª–∏ AI
from Ui_sceen import Ui_Frame  # –ò–º–ø–æ—Ä—Ç UI —Å—Ü–µ–Ω—ã
from sub_box import Ui_Frame as Ui_sub

class AiPanel(QDockWidget, Ui_DockWidget):
    """–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ AI —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.sceens = []  # ‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω

        # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —É–∑–∫–æ–π
        self.setMinimumWidth(300)  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∏—Ä–∏–Ω—É –ø–æ–¥ –≤–∞—à –¥–∏–∑–∞–π–Ω
        self.setMaximumWidth(500)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QScrollArea, —á—Ç–æ–±—ã –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–º–µ–Ω—è–ª —Ä–∞–∑–º–µ—Ä
        self.scrollArea.setMinimumWidth(280)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω
        self.scrollAreaWidgetContents.setMinimumWidth(280)

        # ‚úÖ –°–æ–∑–¥–∞–µ–º layout –≤–Ω—É—Ç—Ä–∏ scrollArea
        self.sceen_layout = QVBoxLayout(self.scrollAreaWidgetContents)
        self.sceen_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.sceen_layout.setAlignment(Qt.AlignTop)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ü–µ–Ω—ã –∫ –≤–µ—Ä—Ö—É

        # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–æ—Å—Ç scrollAreaWidgetContents
        self.scrollAreaWidgetContents.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)

        # –°—á–µ—Ç—á–∏–∫ —Å—Ü–µ–Ω
        self.sceen_count = 0


        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "add_sceen" –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã
        self.add_sceen.clicked.connect(self.add_new_sceen)

    def add_new_sceen(self):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤–Ω—É—Ç—Ä—å QScrollArea"""
        self.sceen_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω—ã

        new_sceen = QWidget(self)
        ui_sceen = Ui_Frame()
        ui_sceen.setupUi(new_sceen)

        # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É render
        self.connect_render_button(ui_sceen, new_sceen)

        new_sceen.objects = []  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        self.sceens.append(new_sceen)

        parent_editor = self.parentWidget()
        if parent_editor:
            ui_sceen.pen.clicked.connect(
                lambda _, btn=ui_sceen.pen: parent_editor.open_drawing_settings(btn, new_sceen))

        if hasattr(ui_sceen, "add_sub_sceen"):
            ui_sceen.add_sub_sceen.clicked.connect(lambda: self.add_new_sub_sceen(new_sceen))

        # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ü–µ–Ω—ã
        if hasattr(ui_sceen, "trash"):
            ui_sceen.trash.clicked.connect(lambda: self.delete_sceen(new_sceen))

        ui_sceen.groupBox_3.setTitle(f"Sceen {self.sceen_count}")

        new_sceen.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        self.sceen_layout.addWidget(new_sceen)

        self.scrollAreaWidgetContents.adjustSize()

        hide_unhide_button = new_sceen.findChild(QPushButton, "hide_unhide")
        if hide_unhide_button:
            hide_unhide_button.clicked.connect(lambda: self.toggle_sub_sceen_visibility(new_sceen))

    def add_new_sub_sceen(self, parent_sceen):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –ø–æ–¥-—Å—Ü–µ–Ω—É (sub_box) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤–Ω—É—Ç—Ä—å `sceen`"""

        scroll_area = parent_sceen.findChild(QScrollArea, "scrollArea")
        if scroll_area is None:
            print("–û—à–∏–±–∫–∞: scrollArea –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ parent_sceen")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º sub_box
        new_sub_sceen = QWidget()
        ui_new_sub_sceen = Ui_sub()  # –ó–∞–≥—Ä—É–∂–∞–µ–º UI sub_box (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
        ui_new_sub_sceen.setupUi(new_sub_sceen)

        new_sub_sceen.objects = []  # ‚úÖ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ sub_sceen
        parent_sceen.objects.append(new_sub_sceen)  # ‚úÖ –°–≤—è–∑—ã–≤–∞–µ–º sub_sceen —Å sceen

        # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ sub_sceen —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É trash
        if hasattr(ui_new_sub_sceen, "trash"):
            ui_new_sub_sceen.trash.clicked.connect(lambda: self.delete_sub_sceen(parent_sceen, new_sub_sceen))

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º sub_sceen –≤ scrollArea
        if scroll_area.widget() is None:
            container = QWidget()
            layout = QVBoxLayout(container)
            layout.setSpacing(0)
            layout.setContentsMargins(0, 0, 0, 0)
            scroll_area.setWidget(container)
        else:
            container = scroll_area.widget()
            layout = container.layout()

        if layout is None:
            layout = QVBoxLayout()
            layout.setSpacing(0)
            layout.setContentsMargins(0, 0, 0, 0)
            container.setLayout(layout)

        layout.addWidget(new_sub_sceen)
        self.sceens.append(new_sub_sceen)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º sub_sceen –≤ —Å–ø–∏—Å–æ–∫ sceens

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã scrollArea
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll_area.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        scroll_area.setMinimumHeight(container.sizeHint().height())

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É sceen
        parent_sceen.setMinimumHeight(parent_sceen.sizeHint().height() + new_sub_sceen.sizeHint().height())

        # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º `pen` –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤ sub_sceen
        if hasattr(ui_new_sub_sceen, "pen"):
            parent_editor = self.parentWidget()
            if parent_editor:
                ui_new_sub_sceen.pen.clicked.connect(
                    lambda _, btn=ui_new_sub_sceen.pen: parent_editor.open_drawing_settings(btn, new_sub_sceen)
                )

        scroll_area.setWidget(container)
        self.scrollAreaWidgetContents.adjustSize()

    def delete_sceen(self, sceen):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ü–µ–Ω—É, –≤—Å–µ –µ—ë –ø–æ–¥-—Å—Ü–µ–Ω—ã, sub_box –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""

        # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ sub_sceen –≤–Ω—É—Ç—Ä–∏ sceen
        for sub_sceen in sceen.objects[:]:
            if isinstance(sub_sceen, QWidget):
                self.delete_sub_sceen(sceen, sub_sceen)

        # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ sceen
        scene_view = self.parentWidget().graphicsView.scene()
        if hasattr(sceen, "objects"):
            for obj in sceen.objects[:]:
                if isinstance(obj, DrawableObject):  # üî• –£–¥–∞–ª—è–µ–º DrawableObject
                    scene_view.removeItem(obj.item)
                    sceen.objects.remove(obj)

        # ‚úÖ –£–¥–∞–ª—è–µ–º sceen –∏–∑ —Å–ø–∏—Å–∫–∞
        if sceen in self.sceens:
            self.sceens.remove(sceen)

        # ‚úÖ –£–¥–∞–ª—è–µ–º sceen –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        sceen.setParent(None)
        sceen.deleteLater()

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º scrollArea
        self.scrollAreaWidgetContents.adjustSize()

    def delete_sub_sceen(self, parent_sceen, sub_sceen):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥-—Å—Ü–µ–Ω—É, sub_box –∏ –≤—Å–µ –µ—ë –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""

        scene_view = self.parentWidget().graphicsView.scene()

        # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã sub_sceen
        if hasattr(sub_sceen, "objects"):
            for obj in sub_sceen.objects[:]:
                if isinstance(obj, DrawableObject):  # üî• –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º DrawableObject
                    scene_view.removeItem(obj.item)
                    sub_sceen.objects.remove(obj)

        # ‚úÖ –£–¥–∞–ª—è–µ–º sub_sceen –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if sub_sceen in parent_sceen.objects:
            parent_sceen.objects.remove(sub_sceen)

        # ‚úÖ –£–¥–∞–ª—è–µ–º sub_sceen –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        sub_sceen.setParent(None)
        sub_sceen.deleteLater()

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É parent_sceen
        parent_sceen.setMinimumHeight(parent_sceen.sizeHint().height())

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º `scrollArea`
        scroll_area = parent_sceen.findChild(QScrollArea, "scrollArea")
        if scroll_area and scroll_area.widget():
            scroll_area.widget().adjustSize()

    def toggle_sub_sceen_visibility(self, parent_sceen):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å sub_sceen"""
        scroll_area = parent_sceen.findChild(QScrollArea, "scrollArea")
        if scroll_area is None:
            print("–û—à–∏–±–∫–∞: scrollArea –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ parent_sceen")
            return

        if scroll_area.isVisible():
            scroll_area.hide()
        else:
            scroll_area.show()

    def connect_render_button(self, ui_sceen, sceen):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É render –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ñ–∏–≥—É—Ä"""
        if hasattr(ui_sceen, "render"):
            ui_sceen.render.clicked.connect(lambda: self.save_scene_shapes(sceen))

    def save_scene_shapes(self, sceen):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∏–∑ sceen –∏ sub_sceen"""
        if not sceen:
            print("–û—à–∏–±–∫–∞: sceen –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        save_folder = QFileDialog.getExistingDirectory(None, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if not save_folder:
            print("–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!")
            return

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∏–∑ sceen
        self.parentWidget().graphicsView.scene().save_shapes_in_scene(sceen, save_folder)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –∏–∑ sub_sceen
        for sub_sceen in sceen.objects:
            if isinstance(sub_sceen, QWidget) and hasattr(sub_sceen, "objects"):
                self.parentWidget().graphicsView.scene().save_shapes_in_scene(sub_sceen, save_folder)










